<template>
  <div>
    <div>
      <!-- Add buttons for Grid and List -->
      <button @click="switchToGrid">Grid</button>
      <button @click="switchToList">List</button>
    </div>
    <client-only>
      <div
        v-masonry
        column-width=".item"
        item-selector=".item"
        class="w-full masonry flex flex-col"
        :class="[size, { 'list-layout': !displayGrid }]"
        horizontal-order="true"
      >
        <div class="flex flex-col">
          <div
            v-masonry-tile
            class="relative transition-opacity duration-300 item"
            v-for="item in items"
            :key="item._key"
            :class="[
              item.double ? 'double' : '',
              item.spacer != 0 ? 'p-2' : '',
              item.image.image || item.video.id ? '' : 'hidden md:block',
              activeTalent &&
              activeTalent != item.reference.talentId &&
              activeTalent != item.reference
                ? 'opacity-25'
                : '',
              !displayGrid ? 'list-layout-item' : '', // Add list layout class
            ]"
            @mouseenter="hoveredItem = item"
            @mouseleave="hoveredItem = null"
          >
            <figure
              class="flex flex-col"
              :class="[
                item.spacer
                  ? `h-space-${item.spacer + 1}  md:h-space-${item.spacer}`
                  : item.image.aspect >= 1
                  ? item.double
                    ? 'h-space-5 md:h-space-3 2xl:h-space-4'
                    : 'h-space-5 md:h-space-3 2xl:h-space-2'
                  : item.double
                  ? 'h-space-18 md:h-space-12 2xl:h-space-8'
                  : 'h-space-12 md:h-space-6 2xl:h-space-4',
                size == 'small' ? 'mb-6' : '',
              ]"
            >
              <NuxtLink
                :class="[
                  containerClass,
                  item.image.position == 'right'
                    ? 'items-end'
                    : item.image.position == 'center'
                    ? 'items-center'
                    : 'items-start',
                ]"
                v-if="item.reference.slug"
                :to="`/project/${item.reference.slug}`"
                @mouseenter.native="hover(item)"
                @mouseleave.native="leave()"
              >
                <span
                  class="flex flex-col items-start h-full max-w-full"
                  :class="size == 'small' ? 'w-full' : 'w-auto'"
                >
                  <figure
                    :class="size == 'small' ? 'block w-full' : 'h-full w-auto'"
                    :style="
                      item.video && item.video.aspect && size == 'small'
                        ? `aspect-ratio: ${item.video.aspect.replace(':', '/')}`
                        : ''
                    "
                  >
                    <figcaption
                      class="block py-2 mr-auto uppercase text-2xl"
                      v-if="size == 'small'"
                      :class="{ 'text-left ': !displayGrid }"
                      @mouseenter="hoveredItem = item"
                      @mouseleave="hoveredItem = null"
                    >
                      <span v-if="item.title">{{ item.title }}</span>
                      <span v-else>{{ item.reference.title }}</span>
                    </figcaption>
                    <MediaImage
                      :size="item.image.size"
                      :aspect="item.image.aspect"
                      :src="item.image.image"
                      v-if="item.image.image"
                      class="contain-image"
                      :sizes="
                        size == 'sm' ? 'sm:60vw md:15vw' : 'sm:150vw md:150vw'
                      "
                    ></MediaImage>
                    <MediaVideo
                      :id="item.video.id"
                      :style="`aspect-ratio: ${item.video.aspect.replace(
                        ':',
                        '/'
                      )}`"
                      v-if="item.video.id"
                      class="object-contain object-top w-auto h-full"
                    ></MediaVideo>
                  </figure>
                </span>
              </NuxtLink>

              <a
                v-else-if="item.link"
                :href="item.link"
                target="_blank"
                :class="[
                  containerClass,
                  item.image.position == 'right'
                    ? 'items-end'
                    : item.image.position == 'center'
                    ? 'items-center'
                    : 'items-start',
                ]"
                @mouseenter="
                  item.reference.title
                    ? SET_ACTIVE_PROJECT(item.reference)
                    : SET_ACTIVE_PROJECT(item._key)
                "
                @mouseleave="SET_ACTIVE_PROJECT(false)"
              >
                <span
                  class="flex flex-col items-start w-auto h-full max-w-full"
                >
                  <figcaption
                    class="block py-2 mr-auto uppercase text-2xl"
                    v-if="size == 'small'"
                  >
                    <span v-if="item.title">{{ item.title }}</span>
                    <span v-else>{{ item.reference.title }}</span>
                  </figcaption>
                  <MediaImage
                    :size="item.image.size"
                    :aspect="item.image.aspect"
                    :src="item.image.image"
                    v-if="item.image.image"
                    class="contain-image"
                    :sizes="
                      size == 'sm' ? 'sm:60vw md:15vw' : 'sm:150vw md:150vw'
                    "
                  ></MediaImage>
                  <MediaVideo
                    :id="item.video.id"
                    :style="`aspect-ratio: ${item.video.aspect.replace(
                      ':',
                      '/'
                    )}`"
                    v-if="item.video.id"
                    class="object-contain object-top w-auto h-full"
                  ></MediaVideo>
                </span>
              </a>
              <figure
                v-else
                :class="[
                  containerClass,
                  item.image.position == 'right'
                    ? 'items-end'
                    : item.image.position == 'center'
                    ? 'items-center'
                    : 'items-start',
                ]"
              >
                <span
                  class="flex flex-col items-start w-auto h-full max-w-full"
                >
                  <figcaption
                    class="block py-2 mr-auto uppercase text-2xl"
                    v-if="size == 'small'"
                  >
                    <span v-if="item.title">{{ item.title }}</span>
                    <span v-else>{{ item.reference.title }}</span>
                  </figcaption>
                  <MediaImage
                    :size="item.image.size"
                    :aspect="item.image.aspect"
                    :src="item.image.image"
                    v-if="item.image.image"
                    :class="imageClass"
                    :sizes="
                      size == 'sm' ? 'sm:60vw md:15vw' : 'sm:150vw md:150vw'
                    "
                  ></MediaImage>
                  <MediaVideo
                    :id="item.video.id"
                    :style="`aspect-ratio: ${item.video.aspect.replace(
                      ':',
                      '/'
                    )}`"
                    v-if="item.video.id"
                    class="object-contain object-top w-auto h-full"
                  ></MediaVideo>
                </span>
              </figure>
            </figure>
          </div>
        </div>
      </div>
    </client-only>
  </div>
</template>
<script>
import { mapMutations, mapState } from "vuex";
export default {
  props: ["items", "size"],
  data() {
    return {
      project: false,
      containerClass: "flex flex-col w-full h-full",
      imageClass: "contain-image",
      displayGrid: true, // Use displayGrid to track the layout state
    };
  },
  computed: {
    ...mapState(["activeProject", "activeTalent"]),
  },
  mounted() {
    this.redraw();
  },
  methods: {
    ...mapMutations(["SET_ACTIVE_PROJECT", "SET_ACTIVE_TALENT"]),
    redraw() {
      if (typeof this.$redrawVueMasonry === "function") {
        this.$redrawVueMasonry();
      }
    },
    switchToGrid() {
      this.displayGrid = true; // Switch to grid layout
      // Use a timeout to ensure proper initialization of Masonry in grid mode
      setTimeout(() => {
        this.redraw();

        // Remove the class after the transition is complete
        setTimeout(() => {}, 1000); // Adjust the duration to match your transition duration
      }, 0);
    },
    switchToList() {
      this.displayGrid = false; // Switch to list layout
      this.redraw();
    },

    hover(item) {
      if (item.reference.title) {
        this.SET_ACTIVE_PROJECT(item.reference);
        if (this.size == "small") {
          this.SET_ACTIVE_TALENT(item.reference);
        } else {
          this.SET_ACTIVE_TALENT(item.reference.talentId);
        }
      } else {
        this.SET_ACTIVE_PROJECT(false);
      }
    },
    leave() {
      this.SET_ACTIVE_PROJECT(false);
      this.SET_ACTIVE_TALENT(false);
    },
  },
};
</script>

<style scoped>
.grid-layout {
  display: grid;
  grid-template-columns: repeat(
    3,
    1fr
  ); /* Adjust the number of columns as needed */
  gap: 10px; /* Adjust the gap between items as needed */
}

.item {
  width: 33.3333%; /* Grid layout item width */
}

/* Define styles for the list layout */
.list-layout {
  display: flex;
  opacity: 0.3; /* You can adjust the opacity value as needed */
  transition: opacity 0.3s ease; /* Add a smooth transition effect */
}
.list-layout .item {
  width: 10%; /* List layout item width (full width) */
}

.list-layout:hover {
  opacity: 1; /* You can adjust the opacity value as needed */
  transition: opacity 0.3s ease; /* Add a smooth transition effect */
}

/* Hide the images by default */
.list-layout-item .contain-image {
  display: none;
}

/* Show the images on hover */
.list-layout-item:hover .contain-image {
  display: block;
}
</style>
